node {
    
 notify('Started')  
 
 try {
   
   stage('Checkout Repo') {
    git 'https://github.com/amitvashist7/jenkins-adv-acc-2.git'
   }
   
   
   def project_path = "spring-boot-project/spring-boot-samples/spring-boot-sample-atmosphere"
   
   dir(project_path) {
   
   stage('Clean Old Packages') {
    sh label: 'Clean', script: 'mvn clean'
   }
   
   
          stage('Maven Compile') {
    sh label: 'Clean', script: 'mvn compile'
   }
   
       stage('Maven Test') {
    sh label: 'Clean', script: 'mvn test'
   }
   
        stage('Maven Package') {
    sh label: 'Clean', script: 'mvn package'
   }
   
   
    stage('Parllel Jobs') {
    parallel task1: {junit 'target/surefire-reports/TEST-*.xml'},
    task2: {archiveArtifacts "target/*?ar"},
    task3: {sh label: 'Index', script: "echo '<h1>TASK BUILD ID: ${env.BUILD_DISPLAY_NAME}</h1>' > index.html" }
    }

        
    
    stage('Deploy Code into Docker Based Stage Env.') {
    sh label: 'Docker', script: 'docker-compose up -d --build'
    }
    
    
    stage('Getting Ready for Ansible') {
    sh label: 'Copy', script: 'cp -rf target/*.jar ../../../ansible/demo5/templates/atmosphere-v1.jar'
    sh label: 'CopyIndex', script: 'cp -rf index.html ../../../ansible/demo5/templates'
    }


    stage('Deploy Code into PROD Env. via Ansible') {
    sh label: 'ansible', script: 'ansible-playbook -i /root/.jenkins/inventory ../../../ansible/demo5/webserver.yaml'
    }
   }    
   notify('Completed')
} catch (err) {
    notify("Error ${err}")
    currentBuild.result = FAILURE
}
}


def notify(status){ 
    emailext(
        to: "amitvashist7@gmail.com",
        subject: "${status}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
        body: """<p>${status}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':</p>
        <p>Check Console output at <a href='${env.BUILD_URL}'> ${env.JOB_NAME} [${env.BUILD_NUMBER}]</a></p>""",
        )   
    
    
}
